<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
  <title>Training — Messages</title>
  <base href="/support-dashboard/">

  <!-- CSP identique à app.html -->
  <meta http-equiv="Content-Security-Policy"
        content="
    default-src 'self';
    script-src 'self' https://www.gstatic.com https://apis.google.com 'unsafe-inline';
    connect-src 'self'
      https://firestore.googleapis.com
      https://www.googleapis.com
      https://www.gstatic.com
      https://identitytoolkit.googleapis.com
      https://securetoken.googleapis.com;
    img-src 'self' data: blob:;
    style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
    font-src https://fonts.gstatic.com;
    frame-src https://accounts.google.com;
    frame-ancestors 'none';
    base-uri 'self';
    form-action 'self';
  ">

  <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;600&display=swap" rel="stylesheet">

  <style>
    /* Styles de base (compatibles avec tes classes existantes) */
    :root{
      --ink:#eaf4ff; --bg:#0b1728; --panel-1: rgba(12,22,36,.52); --panel-2: rgba(10,20,34,.64);
      --border-outer: rgba(120,200,255,.28); --border-inner: rgba(255,255,255,.08);
      --shadow-lg: 0 26px 64px rgba(0,0,0,.55);
    }
    html{ background:#050a12 }
    body{
      margin:0; color:var(--ink);
      font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
      background:
        radial-gradient(1200px 520px at 28% -8%, rgba(30,200,255,.18), transparent 60%),
        radial-gradient(1100px 480px at 120% -20%, rgba(99,255,215,.12), transparent 65%),
        linear-gradient(180deg, #050a12 0%, #0b1728 48%, #06101a 100%);
    }
    .wrap{ max-width:920px; margin:26px auto; padding:0 14px; }
    h1{ margin:0 0 10px 0; text-shadow:0 0 18px rgba(30,200,255,.35) }
    .card{ position:relative; overflow:hidden; border-radius:18px;
      background: linear-gradient(180deg, var(--panel-1), var(--panel-2));
      border:1px solid var(--border-outer); box-shadow: var(--shadow-lg); padding:16px; }
    .card::before{ content:""; position:absolute; inset:0; pointer-events:none; border-radius:inherit;
      box-shadow: inset 0 0 0 1px var(--border-inner), inset 0 1px 24px rgba(30,200,255,.08); }
    .btn{ display:inline-flex; align-items:center; justify-content:center; gap:8px; padding:10px 16px; border-radius:999px; border:0; cursor:pointer; font-weight:800; line-height:1; color:#03121a; background: linear-gradient(180deg, #b9efff, #59d4ff); box-shadow: inset 0 1px 0 rgba(255,255,255,.65), 0 6px 18px rgba(0,0,0,.38); }
    .btn.gray{ background:#2b3446; color:#eaf4ff; box-shadow: inset 0 0 0 1px rgba(255,255,255,.14), 0 6px 18px rgba(0,0,0,.38); }
    .btn.small{ padding:8px 12px; font-size:13px }
    select, textarea{ width:100%; border-radius:12px; background: rgba(7,16,26,.82); border:1px solid #1f3a56; color:var(--ink); padding:10px 12px; }
    textarea{ min-height:100px }
    .topbar{ display:flex; align-items:center; justify-content:space-between; gap:10px; margin-bottom:10px }
    .actions{ display:flex; gap:8px; flex-wrap:wrap }
    .muted{ opacity:.8; font-size:13px }

    /* Toast */
    .toast{position:fixed;right:14px;bottom:14px;background:rgba(10,20,34,.9);color:#eaf4ff;border:1px solid rgba(120,200,255,.35);padding:8px 12px;border-radius:10px;box-shadow:0 8px 24px rgba(0,0,0,.45);opacity:0;transform:translateY(8px);transition:.2s;z-index:9999}
    .toast.show{opacity:1;transform:translateY(0)}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="topbar">
      <h1>Training — Messages</h1>
      <div class="actions">
        <a class="btn gray small" href="app.html" title="Retour au dashboard">← Retour</a>
        <button id="logoutBtn" class="btn gray small" title="Déconnexion">Déconnexion</button>
      </div>
    </div>

    <div class="card" style="padding:10px; display:flex; gap:8px; align-items:center; flex-wrap:wrap">
      <label style="font-weight:700">Day:</label>
      <select id="tmDay" style="max-width:160px"></select>
      <button id="tmAdd" class="btn small">+ Add message</button>
      <span class="muted">Tous les changements sont enregistrés dans Firestore.</span>
    </div>

    <div id="tmList" style="display:grid; gap:10px; margin-top:10px"></div>
  </div>

  <!-- Toast -->
  <div id="toast" class="toast" role="status" aria-live="polite"></div>

  <!-- Page Training — autonome -->
  <script type="module">
    // -------- Toast --------
    function toast(msg){ const el=document.getElementById('toast'); if(!el) return;
      el.textContent=msg; el.classList.add('show'); setTimeout(()=>el.classList.remove('show'),1200); }

    // -------- Firebase init (même config que app.html) --------
    import { initializeApp, getApps, getApp } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-app.js";
    import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-auth.js";
    import { initializeAppCheck, ReCaptchaV3Provider } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-app-check.js";
    import {
      getFirestore, collection, doc, addDoc, setDoc, getDocs, deleteDoc,
      query, orderBy, serverTimestamp, writeBatch
    } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-firestore.js";

    const FIREBASE_CONFIG = {
      apiKey: "AIzaSyD0X6PY8Xwnt6GFjh4I9J2v65KBPnFPuEs",
      authDomain: "support-app-64fca.firebaseapp.com",
      projectId: "support-app-64fca",
      storageBucket: "support-app-64fca.appspot.com",
      messagingSenderId: "391759293249",
      appId: "1:391759293249:web:e06e61accd103c98a60fc0",
      measurementId: "G-PYE2M5LMNY"
    };

    const app = getApps().length ? getApp() : initializeApp(FIREBASE_CONFIG);
    try {
      initializeAppCheck(app, {
        provider: new ReCaptchaV3Provider("6LfyINcrAAAAALHjNBMMm3hRplWVUx4_i-HSLrpL"),
        isTokenAutoRefreshEnabled: true,
      });
    } catch {}

    const auth = getAuth(app);
    const db   = getFirestore(app);

    // -------- Accès réservé (auth) --------
    function goToLogin(){
      try{
        const login = new URL("index.html", location.href);
        const back  = "training.html";
        login.searchParams.set("redirect", back);
        location.replace(login.toString());
      }catch{
        location.replace("index.html");
      }
    }

    const btnLogout = document.getElementById('logoutBtn');
    btnLogout?.addEventListener('click', async ()=>{ try{ await signOut(auth); }catch{} goToLogin(); });

    onAuthStateChanged(auth, async (user)=>{
      if (!user) return goToLogin();
      await loadAndRender(currentDay);
    });

    // -------- DOM refs --------
    const selDay = document.getElementById('tmDay');
    const btnAdd = document.getElementById('tmAdd');
    const listEl = document.getElementById('tmList');

    // -------- State & helpers Firestore --------
    const DAY_IDS = ["day1","day2","day3","day4","day5","day6"];
    let currentDay = "day1";
    let currentDocs = []; // pour ↑ / ↓

    const dayMessagesCol = (dayId) => collection(db, `training_library/days/${dayId}/messages`);
    const msgDoc = (dayId, id) => doc(db, `training_library/days/${dayId}/messages/${id}`);

    async function fetchMessages(dayId){
      const q = query(dayMessagesCol(dayId), orderBy('order','asc'));
      const snap = await getDocs(q);
      return snap.docs.map(d => ({ id: d.id, data: d.data() }));
    }
    async function addMessage(dayId, uid){
      const ref = await addDoc(dayMessagesCol(dayId), {
        text: "", order: Date.now(), updatedAt: serverTimestamp(), updatedBy: uid || null
      });
      return ref.id;
    }
    async function saveMessage(dayId, id, text, uid){
      await setDoc(msgDoc(dayId, id), {
        text, updatedAt: serverTimestamp(), updatedBy: uid || null
      }, { merge: true });
    }
    async function deleteMessageFS(dayId, id){
      await deleteDoc(msgDoc(dayId, id));
    }
    async function swapOrder(dayId, a, b){
      const batch = writeBatch(db);
      batch.update(msgDoc(dayId, a.id), { order: b.data.order });
      batch.update(msgDoc(dayId, b.id), { order: a.data.order });
      await batch.commit();
    }

    // -------- UI: select Day --------
    function initDaySelect(){
      selDay.innerHTML = "";
      DAY_IDS.forEach(d => {
        const opt = document.createElement('option');
        opt.value = d; opt.textContent = d.replace('day','Day ');
        selDay.appendChild(opt);
      });
      selDay.value = currentDay;
      selDay.addEventListener('change', async ()=>{
        currentDay = selDay.value;
        await loadAndRender(currentDay);
      });
    }
    initDaySelect();

    // -------- UI: render list --------
    function renderList(docs, {enterEditId} = {}){
      listEl.innerHTML = "";
      currentDocs = docs.slice();

      if (docs.length === 0){
        const empty = document.createElement('div');
        empty.className = "card"; empty.style.padding="12px";
        empty.textContent = "No messages yet for this day.";
        listEl.appendChild(empty);
        return;
      }

      docs.forEach(({id, data})=>{
        const card = document.createElement('div');
        card.className = "card"; card.style.padding = "12px"; card.dataset.id = id;
        card.innerHTML = `
          <div style="display:flex; justify-content:space-between; gap:8px; align-items:center;">
            <div style="font-weight:700">Message</div>
            <div class="actions" style="gap:6px; display:flex;">
              <button class="btn small" data-copy>Copy</button>
              <button class="btn gray small" data-edit>Edit</button>
              <button class="btn gray small" data-save style="display:none">Save</button>
              <button class="btn gray small" data-up>↑</button>
              <button class="btn gray small" data-down>↓</button>
              <button class="btn gray small" data-del>Del</button>
            </div>
          </div>
          <textarea class="tmText" readonly style="margin-top:8px; min-height:100px"></textarea>
        `;
        const ta = card.querySelector('.tmText');
        ta.value = data?.text || "";

        const btnCopy = card.querySelector('[data-copy]');
        const btnEdit = card.querySelector('[data-edit]');
        const btnSave = card.querySelector('[data-save]');
        const btnUp   = card.querySelector('[data-up]');
        const btnDown = card.querySelector('[data-down]');
        const btnDel  = card.querySelector('[data-del]');

        const enterEdit = () => {
          ta.readOnly = false; ta.focus();
          const v = ta.value; ta.value = ""; ta.value = v;
          btnSave.style.display = ""; btnEdit.style.display = "none";
        };
        const exitEdit = () => {
          ta.readOnly = true; btnSave.style.display = "none"; btnEdit.style.display = "";
        };

        btnCopy.addEventListener('click', async ()=> {
          try { await navigator.clipboard.writeText(ta.value || ""); toast("Copied ✓"); }
          catch(e){ toast("Error, please retry"); console.error(e); }
        });
        btnEdit.addEventListener('click', enterEdit);
        btnSave.addEventListener('click', async ()=>{
          try {
            const uid = auth.currentUser?.uid || null;
            await saveMessage(currentDay, id, ta.value, uid);
            exitEdit(); toast("Saved ✓");
          } catch(e){ toast("Error, please retry"); console.error(e); }
        });
        btnDel.addEventListener('click', async ()=>{
          try { await deleteMessageFS(currentDay, id); await loadAndRender(currentDay); toast("Deleted ✓"); }
          catch(e){ toast("Error, please retry"); console.error(e); }
        });
        btnUp.addEventListener('click', async ()=>{
          try { const idx = currentDocs.findIndex(d => d.id === id);
            if (idx > 0) { await swapOrder(currentDay, currentDocs[idx], currentDocs[idx-1]); await loadAndRender(currentDay); }
          } catch(e){ toast("Error, please retry"); console.error(e); }
        });
        btnDown.addEventListener('click', async ()=>{
          try { const idx = currentDocs.findIndex(d => d.id === id);
            if (idx >= 0 && idx < currentDocs.length - 1) { await swapOrder(currentDay, currentDocs[idx], currentDocs[idx+1]); await loadAndRender(currentDay); }
          } catch(e){ toast("Error, please retry"); console.error(e); }
        });

        listEl.appendChild(card);
        if (enterEditId && id === enterEditId) enterEdit();
      });
    }

    async function loadAndRender(dayId, opts){
      try {
        const docs = await fetchMessages(dayId);
        renderList(docs, opts);
      } catch (e) {
        console.error(e);
        toast("Error, please retry");
      }
    }

    // Add new message
    btnAdd.addEventListener('click', async ()=>{
      try {
        const uid = auth.currentUser?.uid || null;
        const newId = await addMessage(currentDay, uid);
        await loadAndRender(currentDay, { enterEditId: newId });
        toast("Added ✓");
      } catch(e){ toast("Error, please retry"); console.error(e); }
    });
  </script>
</body>
</html>
